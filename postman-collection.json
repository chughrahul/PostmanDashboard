{
	"info": {
		"_postman_id": "dac0e67d-9b1c-4b2f-b0a2-2f78f4ac4194",
		"name": "Api_Collection_Raxa_testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "13012658",
		"_collection_link": "https://raxa-backend.postman.co/workspace/Raxa-Backend~ce8194b1-c65a-4c78-8aad-d2afd3b757ba/collection/23252346-dac0e67d-9b1c-4b2f-b0a2-2f78f4ac4194?action=share&source=collection_link&creator=13012658"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "User- identifier check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - uniqueIdentifier and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.uniqueIdentifier).to.exist;",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"uniqueIdentifier is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.uniqueIdentifier).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user?identifier=9999999999&type=phone",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "identifier",
									"value": "9999999999"
								},
								{
									"key": "type",
									"value": "phone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - generate-otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"newUserSignUpRequestId\", jsonData.requestId);",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('requestId');",
									"    pm.expect(jsonData).to.have.property('messageId');",
									"    pm.expect(jsonData).to.have.property('language');",
									"    pm.expect(jsonData.language).to.eql('en');",
									"});",
									"",
									"pm.test(\"requestId is a valid UUID\", function () {",
									"    const jsonData = pm.response.json();",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.requestId).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"messageId has correct format\", function () {",
									"    const jsonData = pm.response.json();",
									"    const messageIdRegex = /^\\{MessageId: [0-9a-f-]+\\}$/i;",
									"    pm.expect(jsonData.messageId).to.match(messageIdRegex);",
									"});",
									"",
									"pm.test(\"Language is English\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.language).to.eql('en');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/generate-otp/?requesterType=phone&requester=9999999999&language=en&country=India",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"generate-otp",
								""
							],
							"query": [
								{
									"key": "requesterType",
									"value": "phone"
								},
								{
									"key": "requester",
									"value": "9999999999"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "country",
									"value": "India"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User -verify -otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    if(jsonData.error == null){",
									"        pm.expect(jsonData).to.have.property('status');",
									"        pm.expect(jsonData).to.have.property('accountExists');",
									"    } else {",
									"        pm.expect(jsonData).to.have.property('error');",
									"    }",
									"});",
									"",
									"pm.test(\"Status is success\", function () {",
									"    const jsonData = pm.response.json();",
									"    if(jsonData.error==null)",
									"        pm.expect(jsonData.status).to.eql('success');",
									"    else",
									"        pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"{{newUserSignUpRequestId}}\",\n    \"otp\": \"879940\",\n    \"action\": \"signup\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/user/verify-otp"
					},
					"response": []
				},
				{
					"name": "User -v5(user creation call )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Status Code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test 2: Response Time is Acceptable",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response Body has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('display');",
									"    pm.expect(jsonData).to.have.property('userName');",
									"    pm.expect(jsonData).to.have.property('providerUuid');",
									"    pm.expect(jsonData).to.have.property('personUuid');",
									"    pm.expect(jsonData.uuid).to.be.a('string');",
									"    pm.expect(jsonData.display).to.be.a('string');",
									"    pm.expect(jsonData.userName).to.be.a('string');",
									"    pm.expect(jsonData.providerUuid).to.be.a('string');",
									"    pm.expect(jsonData.personUuid).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"raxa2\",\n    \"lastName\": \"dummy2\",\n    \"password\": \"raxadummy2\",\n    \"email\": \"raxa2.dummy2@raxa.com\",\n    \"dob\": \"1990-11-02\",\n    \"gender\": \"M\",\n    \"country\": \"India\",\n    \"phone\": \"9900990099\",\n    \"otpRequestId\": \"{{newUserSignUpRequestId}}\",\n    \"type\": \"patient\",\n    \"isProvider\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/user/v5"
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if either 'Cookie' or 'Authorization' header is present in the request",
									"let hasCookie = pm.request.headers.has(\"Cookie\");",
									"let hasAuthorization = pm.request.headers.has(\"Authorization\");",
									"",
									"// If neither header is present, log a message and throw an error to prevent the request from proceeding",
									"if (!hasCookie && !hasAuthorization) {",
									"    console.error(\"Request must include either 'Cookie' or 'Authorization' header.\");",
									"    throw new Error(\"Missing required headers: 'Cookie' or 'Authorization'\");",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function () {",
									"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Users array structure is valid\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.users).to.be.an('array');",
									"  ",
									"  responseData.users.forEach(function(user) {",
									"    pm.expect(user).to.be.an('object');",
									"    pm.expect(user.username).to.exist.and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"    pm.expect(user.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    pm.expect(user.location).to.exist.and.to.have.lengthOf.at.least(1, \"Location should not be empty\");",
									"  });",
									"});",
									"",
									"pm.test(\"Status and isAdminCordinatorAccount fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('isAdminCordinatorAccount');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Authorization\": \"Basic cmFpbmEucmFpNzk3MjpSYWluYTEyMw==\",\n    \"isProvider\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/login/v2"
					},
					"response": []
				},
				{
					"name": "Get Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.sessionId).to.exist;",
									"    pm.expect(responseData.authenticated).to.exist;",
									"    pm.expect(responseData.user).to.exist;",
									"    pm.expect(responseData.user.privileges).to.exist;",
									"    pm.expect(responseData.user.systemId).to.exist;",
									"    pm.expect(responseData.user.person).to.exist;",
									"    pm.expect(responseData.user.display).to.exist;",
									"    pm.expect(responseData.user.roles).to.exist;",
									"    pm.expect(responseData.user.userProperties).to.exist;",
									"    pm.expect(responseData.user.retired).to.exist;",
									"    pm.expect(responseData.user.uuid).to.exist;",
									"    pm.expect(responseData.user.username).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"pm.test(\"Session ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.sessionId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Session ID should not be empty\");",
									"});",
									"",
									"pm.test(\"Authenticated is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.authenticated).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Verify that privileges array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user.privileges).to.exist.and.to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/login/session"
					},
					"response": []
				},
				{
					"name": "Login call Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Check if either 'Cookie' or 'Authorization' header is present in the request",
									"let hasCookie = pm.request.headers.has(\"Cookie\");",
									"let hasAuthorization = pm.request.headers.has(\"Authorization\");",
									"",
									"// If neither header is present, log a message and throw an error to prevent the request from proceeding",
									"if (!hasCookie && !hasAuthorization) {",
									"    console.error(\"Request must include either 'Cookie' or 'Authorization' header.\");",
									"    throw new Error(\"Missing required headers: 'Cookie' or 'Authorization'\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if either 'Cookie' or 'Authorization' header is present in the request",
									"let hasCookie = pm.request.headers.has(\"Cookie\");",
									"let hasAuthorization = pm.request.headers.has(\"Authorization\");",
									"",
									"// If neither header is present, log a message and throw an error to prevent the request from proceeding",
									"if (!hasCookie && !hasAuthorization) {",
									"    console.error(\"Request must include either 'Cookie' or 'Authorization' header.\");",
									"    throw new Error(\"Missing required headers: 'Cookie' or 'Authorization'\");",
									"}",
									"",
									"// Test 2: Response Time is Acceptable",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"// Test 3: Response Body Validation",
									"pm.test(\"Response Body has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('personUuid').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('selfPatientUuid').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('isSuperUser').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('personId').to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('providerUuid').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('providerAttributes').to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('personAttributes').to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('display').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('firstName').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('lastName').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('gender').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('age').to.be.a('number');",
									"    pm.expect(jsonData).to.have.property('dob').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('isPatient').to.be.a('boolean');",
									"    pm.expect(jsonData).to.have.property('location').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('locationAddress').to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('roles').to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('privileges').to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('serverTime').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('raxaVersion').to.be.a('string');",
									"    pm.collectionVariables.set(\"providerUuid\", pm.response.json().providerUuid);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Openfire User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"currentEpochTime\", Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jabberUsername\": \"17587a79-45c5-4efa-a720-d9a18959b4d0\",\n    \"username\": \"raina.rai7972\",\n    \"password\": \"Raina123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/login/openfireuser?_dc={{currentEpochTime}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"login",
								"openfireuser"
							],
							"query": [
								{
									"key": "_dc",
									"value": "{{currentEpochTime}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Patient - create new patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response Body has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('name').to.be.a('string');",
									"    pm.expect(jsonData).to.have.property('identifier').to.be.a('string');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a new date object for the current date and time",
									"const now = new Date();",
									"",
									"// Format the date and time components to ensure leading zeros where necessary",
									"function twoDigits(value) {",
									"  return ('0' + value).slice(-2);",
									"}",
									"",
									"function generateRandomNumber(length) {",
									"    let number = '';",
									"    for(let i = 0; i < length; i++) {",
									"        number += Math.floor(Math.random() * 10).toString();",
									"    }",
									"    return number;",
									"}",
									"",
									"let genders = ['M', 'F', 'O'];",
									"let gender = genders[Math.floor(Math.random() * genders.length)];",
									"pm.collectionVariables.set('gender', gender);",
									"",
									"var uuid = require('uuid');",
									"pm.collectionVariables.set(\"uuid\", uuid.v4().toString());",
									"",
									"let familyName = 'P' + generateRandomNumber(8);",
									"pm.collectionVariables.set('familyName', familyName);",
									"",
									"let phoneNumber = '5' + generateRandomNumber(9);",
									"pm.collectionVariables.set('phoneNumber', phoneNumber);",
									"",
									"// Construct the formatted date and time string",
									"const currentDateAndTime = now.getFullYear() + '-' +",
									"  twoDigits(now.getMonth() + 1) + '-' +",
									"  twoDigits(now.getDate()) + 'T' +",
									"  twoDigits(now.getHours()) + ':' +",
									"  twoDigits(now.getMinutes()) + ':' +",
									"  twoDigits(now.getSeconds()) + '.' +",
									"  (now.getMilliseconds() / 1000).toFixed(3).slice(2, 5);",
									"",
									"// Set the variable in the environment",
									"pm.collectionVariables.set(\"currentDateAndTime\", currentDateAndTime);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gender\": \"{{gender}}\",\n    \"uuid\": \"{{uuid}}\",\n    \"patient\": \"{{uuid}}\",\n    \"age\": 26,\n    \"encounterType\": \"raxa00000-0000-0000-0000-000000000004\",\n    \"encounterDatetime\": \"{{currentDateAndTime}}\",\n    \"provider\": \"{{providerUuid}}\",\n    \"names\": [\n        {\n            \"givenName\": \"Test\",\n            \"familyName\": \"{{familyName}}\"\n        }\n    ],\n    \"attributes\": [\n        {\n            \"attributeType\": \"raxa00000-0000-0000-0000-000000000010\",\n            \"value\": {{phoneNumber}}\n        },\n        {\n            \"attributeType\": \"raxa00000-0000-0000-0000-0000000000BG\",\n            \"value\": \"B+\"\n        }\n    ],\n    \"locationId\": 86600\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/patient/v2"
					},
					"response": []
				},
				{
					"name": "Patient- patientDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Validate the response schema for required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.providerPersonUuid).to.exist;",
									"    pm.expect(responseData.personAttributes).to.exist;",
									"    pm.expect(responseData.personAddress).to.exist;",
									"    pm.expect(responseData.givenName).to.exist;",
									"    pm.expect(responseData.familyName).to.exist;",
									"    pm.expect(responseData.age).to.exist;",
									"    pm.expect(responseData.birthdate).to.exist;",
									"    pm.expect(responseData.gender).to.exist;",
									"    pm.expect(responseData.weight).to.exist;",
									"    pm.expect(responseData.height).to.exist;",
									"    pm.expect(responseData.finalDiagnosis).to.exist;",
									"    pm.expect(responseData.respiratoryRate).to.exist;",
									"    pm.expect(responseData.pulse).to.exist;",
									"    pm.expect(responseData.temperature).to.exist;",
									"    pm.expect(responseData.systolicBP).to.exist;",
									"    pm.expect(responseData.diastolicBP).to.exist;",
									"    pm.expect(responseData.bloodOxySat).to.exist;",
									"    pm.expect(responseData.patientStatus).to.exist;",
									"    pm.expect(responseData.order).to.exist;",
									"    pm.expect(responseData.accessPath).to.exist;",
									"});",
									"",
									"pm.test(\"providerPersonUuid is a non-empty uuid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.providerPersonUuid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"givenName is a non-empty uuid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.givenName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"personAttributes is a non-empty list\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check that personAttributes exists, is an array, and is not empty",
									"    pm.expect(responseData).to.have.property(\"personAttributes\");",
									"    pm.expect(responseData.personAttributes).to.be.an(\"array\").that.is.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientUuid\": \"75cdbd39-0214-4e35-bbe9-95fe03b4ff41\",\n    \"securityGroupId\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/patient/patientdetails"
					},
					"response": []
				},
				{
					"name": "Patient -myPatientV5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData[0]).to.have.property('all').that.is.an('array');",
									"    pm.expect(jsonData[0]).to.have.property('incare').that.is.an('array');",
									"    pm.expect(jsonData[0]).to.have.property('oldPatientsToBeRemoved').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Request body has correct structure\", function () {",
									"    const requestBody = pm.request.body.raw;",
									"    const jsonData = JSON.parse(requestBody);",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('oldPatientsList').that.is.an('array');",
									"    pm.expect(jsonData).to.have.property('groupIds').that.is.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"oldPatientsList\": [],\n    \"groupIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}patientlist/myPatientsV5?chunkSize=30",
							"host": [
								"{{BaseUrl}}patientlist"
							],
							"path": [
								"myPatientsV5"
							],
							"query": [
								{
									"key": "chunkSize",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient- updatePatientV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\" , function () {",
									"});",
									"",
									"pm.test(\"Response should have all required properties\", function() {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData).to.have.property('oldPatientsToBeRemoved').that.is.a('array');",
									"    // Check for display",
									"    pm.expect(jsonData).to.have.property('newPatientsToBeAdded').that.is.a('array');",
									"    pm.expect(jsonData).to.have.property('totalNumberOfPatients').that.is.a('number');",
									"",
									"});",
									"",
									"pm.test(\"Request body is an array\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(requestBody).to.be.an(\"array\");",
									"});",
									"",
									"",
									"",
									"// Include additional tests for further validation if necessary",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"80444\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}patientlist/updatePatientListV2?chunkSize=30",
							"host": [
								"{{BaseUrl}}patientlist"
							],
							"path": [
								"updatePatientListV2"
							],
							"query": [
								{
									"key": "chunkSize",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient- v2 LinkHealthId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Validate the response schema for the field 'isUserAbhaLoginUpdated'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    if(responseData.error == null)",
									"        pm.expect(responseData).to.have.property('isUserAbhaLoginUpdated');",
									"    else",
									"        pm.expect(responseData).to.have.property('error')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient\": \"75cdbd39-0214-4e35-bbe9-95fe03b4ff41\",\n    \"healthid\": \"sumitdemonew@sbx\",\n    \"abhaNumber\": \"44-2653-6813-4604\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/phr/auth/identifier/v2/linkHealthId"
					},
					"response": []
				},
				{
					"name": "Patient-hip healthId",
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "nick.henry",
								"password": "nickhenry"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/hip/patient/v2/healthId?patient=ab125e33-2be1-4c90-b742-32fc5e1bf025&location=60f77f6e-944d-4eae-ad6f-ad0571bbd2a3",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"hip",
								"patient",
								"v2",
								"healthId"
							],
							"query": [
								{
									"key": "patient",
									"value": "ab125e33-2be1-4c90-b742-32fc5e1bf025"
								},
								{
									"key": "location",
									"value": "60f77f6e-944d-4eae-ad6f-ad0571bbd2a3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Provider",
			"item": [
				{
					"name": "Provider - ( get provider list by uuid )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"// Test 4: Response Body Validation",
									"pm.test(\"Response Body has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');",
									"});",
									"",
									"// Test 5: Verify Specific Data",
									"pm.test(\"Verify specific data in the response\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.results.length).to.be.at.least(1);",
									"    pm.expect(jsonData.results[0]).to.have.property('uuid').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('display').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('name').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('person').to.be.an('object');",
									"    pm.expect(jsonData.results[0].person).to.have.property('uuid').to.be.a('string');",
									"    pm.expect(jsonData.results[0].person).to.have.property('display').to.be.a('string');",
									"    pm.expect(jsonData.results[0].person).to.have.property('name').to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "nickhenry",
								"username": "nick.henry"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/provider?uuid=7fdfd7d4-3b35-40ea-ab59-3cf610db2373&page=1&start=0&limit=24",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"provider"
							],
							"query": [
								{
									"key": "uuid",
									"value": "7fdfd7d4-3b35-40ea-ab59-3cf610db2373"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider-chatAndSecurityGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"pm.test(\"Request body has correct structure\", function () {",
									"    const requestBody = pm.request.body.raw;",
									"    const jsonData = JSON.parse(requestBody);",
									"    ",
									"    pm.expect(jsonData).to.be.an('object');",
									"    ",
									"    pm.expect(jsonData).to.have.property('uuid').that.is.a('string');",
									"",
									"});",
									"",
									"",
									"pm.test(\"Response Body Structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Check the structure of the response body",
									"    pm.expect(jsonData).to.have.property(\"Groups\").to.be.an(\"array\");",
									"",
									"    // Check properties within the 'Groups' array",
									"    const groups = jsonData.Groups;",
									"    pm.expect(groups).to.have.lengthOf.at.least(1);",
									"",
									"    // Check properties of the first group object",
									"    const group = groups[0];",
									"    pm.expect(group).to.have.property(\"locationId\").to.be.a(\"number\");",
									"    pm.expect(group).to.have.property(\"locationUuid\").to.be.a(\"string\");",
									"    pm.expect(group).to.have.property(\"locationName\").to.be.a(\"string\");",
									"    pm.expect(group).to.have.property(\"address\").to.be.null;",
									"    pm.expect(group).to.have.property(\"groupId\").to.be.a(\"number\");",
									"    pm.expect(group).to.have.property(\"groupName\").to.be.a(\"string\");",
									"    pm.expect(group).to.have.property(\"groupUuid\").to.be.a(\"string\");",
									"    pm.expect(group).to.have.property(\"description\").to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "nickhenry",
								"username": "nick.henry"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"uuid\":\"7fdfd7d4-3b35-40ea-ab59-3cf610db2373\"}"
						},
						"url": "{{BaseUrl}}/provider/chatAndSecurityGroups"
					},
					"response": []
				},
				{
					"name": "Provider - get list of provider based on param q",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"pm.test(\"Response Body Structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Check the structure of the response body",
									"    pm.expect(jsonData).to.have.property(\"results\").to.be.an(\"array\");",
									"",
									"    // Check properties within the 'results' array",
									"    const results = jsonData.results;",
									"    pm.expect(results).to.have.lengthOf.at.least(1);",
									"",
									"    // Check properties of the first result object",
									"    const result = results[0];",
									"    pm.expect(result).to.have.property(\"display\").to.be.a(\"string\");",
									"    pm.expect(result).to.have.property(\"uuid\").to.be.a(\"string\");",
									"    pm.expect(result).to.have.property(\"providerId\").to.be.a(\"number\");",
									"",
									"    // Check properties of the 'person' object",
									"    const person = result.person;",
									"    pm.expect(person).to.have.property(\"name\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"display\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"uuid\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"personId\").to.be.a(\"number\");",
									"    pm.expect(person).to.have.property(\"gender\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"age\").to.be.a(\"number\");",
									"    pm.expect(person).to.have.property(\"dob\").to.be.a(\"string\");",
									"",
									"    // Check properties of the 'providerAttributes' object",
									"    const providerAttributes = result.providerAttributes;",
									"    pm.expect(providerAttributes).to.have.property(\"PhoneNumberVerified\").to.be.a(\"boolean\");",
									"",
									"    // Check properties of the 'personAttributes' object",
									"    const personAttributes = result.personAttributes;",
									"    pm.expect(personAttributes).to.have.property(\"Location\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"securityGroup\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Health Center\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Primary Contact\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Country\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Auth\").to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "nickhenry",
								"username": "nick.henry"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/provider?q=raxa&rep=full&_dc=1698987125342000&page=1&start=0&limit=25",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"provider"
							],
							"query": [
								{
									"key": "q",
									"value": "raxa"
								},
								{
									"key": "rep",
									"value": "full"
								},
								{
									"key": "_dc",
									"value": "1698987125342000"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "25"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider-SecurityGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response has correct structure for Groups\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check if Groups exists and is an array",
									"    pm.expect(responseData).to.have.property(\"Groups\");",
									"    pm.expect(responseData.Groups).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    // Check the structure of the first item in the Groups array",
									"    const group = responseData.Groups[0];",
									"    ",
									"    pm.expect(group).to.have.property(\"locationId\").that.is.a(\"number\");",
									"    pm.expect(group).to.have.property(\"locationUuid\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"locationName\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"address\").that.satisfy(val => val === null || typeof val === \"string\");",
									"    pm.expect(group).to.have.property(\"groupId\").that.is.a(\"number\");",
									"    pm.expect(group).to.have.property(\"groupName\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"groupUuid\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"description\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"accessPath\").that.is.a(\"string\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "nickhenry",
								"username": "nick.henry"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": "{{BaseUrl}}/provider/securityGroups"
					},
					"response": []
				},
				{
					"name": "Provider - Providers Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Response Time is Acceptable",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response Body Structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Check the structure of the response body",
									"    pm.expect(jsonData).to.have.property(\"results\").to.be.an(\"array\");",
									"",
									"    // Check properties within the 'results' array",
									"    const results = jsonData.results;",
									"    pm.expect(results).to.have.lengthOf.at.least(1);",
									"",
									"    // Check properties of the first result object",
									"    const result = results[0];",
									"    pm.expect(result).to.have.property(\"display\").to.be.a(\"string\");",
									"    pm.expect(result).to.have.property(\"uuid\").to.be.a(\"string\");",
									"    pm.expect(result).to.have.property(\"providerId\").to.be.a(\"number\");",
									"",
									"    // Check properties of the 'person' object",
									"    const person = result.person;",
									"    pm.expect(person).to.have.property(\"name\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"display\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"uuid\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"personId\").to.be.a(\"number\");",
									"    pm.expect(person).to.have.property(\"gender\").to.be.a(\"string\");",
									"    pm.expect(person).to.have.property(\"age\").to.be.a(\"number\");",
									"    ",
									"    // Check properties of the 'providerAttributes' object",
									"    const providerAttributes = result.providerAttributes;",
									"    pm.expect(providerAttributes).to.have.property(\"PhoneNumberVerified\").to.be.a(\"boolean\");",
									"",
									"    // Check properties of the 'personAttributes' object",
									"    const personAttributes = result.personAttributes;",
									"    pm.expect(personAttributes).to.have.property(\"Location\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"securityGroup\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Health Center\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Primary Contact\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Country\").to.be.a(\"string\");",
									"    pm.expect(personAttributes).to.have.property(\"Auth\").to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "kartik.patel",
								"password": "qwasqwas"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerUuidLists\": [\n        \"7fdfd7d4-3b35-40ea-ab59-3cf610db2373\"\n    ],\n    \"feedId\": 110780\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseUrl}}/provider/providersProfile"
					},
					"response": []
				},
				{
					"name": "getRequestsToJoinRaxaExperts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Response Time is Acceptable",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response Body Structure\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Check that the response has a 'results' property and it's an array",
									"    pm.expect(jsonData).to.have.property(\"results\");",
									"    pm.expect(jsonData.results).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "qwasqwas",
								"username": "kartik.patel"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/providernetwork/getRequestsToJoinRaxaExperts"
					},
					"response": []
				},
				{
					"name": "assistantChatGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response has correct structure for Groups\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    // Check if Groups exists and is an array",
									"    pm.expect(responseData).to.have.property(\"Groups\");",
									"    pm.expect(responseData.Groups).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    // Check the structure of the first item in the Groups array",
									"    const group = responseData.Groups[0];",
									"    ",
									"    pm.expect(group).to.have.property(\"locationId\").that.is.a(\"number\");",
									"    pm.expect(group).to.have.property(\"locationUuid\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"locationName\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"address\").that.satisfy(val => val === null || typeof val === \"string\");",
									"    pm.expect(group).to.have.property(\"groupId\").that.is.a(\"number\");",
									"    pm.expect(group).to.have.property(\"groupName\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"groupUuid\").that.is.a(\"string\");",
									"    pm.expect(group).to.have.property(\"description\").that.is.a(\"string\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "sumit.test",
								"password": "Sumit@15"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/provider/assistantChatGroups"
					},
					"response": []
				},
				{
					"name": "Add Use Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"pm.test(\"Response Body has 'status' Property\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"});",
									"",
									"pm.test(\"'status' Property is a String\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"'status' Property Value is 'failure'\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "qwasqwas",
								"username": "kartik.patel"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/provider/imageSummary/addUseCount",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"provider",
								"imageSummary",
								"addUseCount"
							],
							"query": [
								{
									"key": "uuid",
									"value": "d075d480-3c34-4ad9-b777-0b03aaddfd2d",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "start",
									"value": "0",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "24",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feed",
			"item": [
				{
					"name": "Feed - ( get feed call with feedOffset as parameter )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time - \" + pm.response.responseTime + \"ms\", function () {",
									"});",
									"",
									"",
									"// Test 3: Response Body Validation",
									"pm.test(\"Response Body has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');",
									"});",
									"",
									"// Test 4: Verify Specific Data",
									"pm.test(\"Verify specific data in the response\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.results.length).to.be.at.least(1);",
									"    pm.expect(jsonData.results[0]).to.have.property('feedId').to.be.a('number');",
									"    pm.expect(jsonData.results[0]).to.have.property('linkUuid').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('name').to.eql('social');",
									"    pm.expect(jsonData.results[0]).to.have.property('senderDisplay').that.is.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('senderUuid').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('dateCreated').to.be.a('string');",
									"    pm.expect(jsonData.results[0]).to.have.property('likes').to.be.an('array');",
									"    pm.expect(jsonData.results[0]).to.have.property('comments').to.be.an('array');",
									"    pm.expect(jsonData.results[0]).to.have.property('uuid').to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "qwasqwas",
								"username": "kartik.patel"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/feed?feedOffset=1&feedTypes=social&feedTypes=cpc",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"feed"
							],
							"query": [
								{
									"key": "feedOffset",
									"value": "1"
								},
								{
									"key": "feedTypes",
									"value": "social"
								},
								{
									"key": "feedTypes",
									"value": "cpc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": {
			"password": "Raina123",
			"username": "raina.rai7972"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://staging.raxa.io/openmrs/ws/rest/v1/raxacore/",
			"type": "string"
		},
		{
			"key": "currentEpochTime",
			"value": ""
		}
	]
}